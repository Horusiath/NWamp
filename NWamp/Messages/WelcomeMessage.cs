using System.Diagnostics;

namespace NWamp.Messages
{
    /// <summary>
    /// Message class used to initialize new WAMP session.
    /// </summary>
    [DebuggerDisplay("[{Type}, \"{SessionId}\", \"{ProtocolVersion}\", \"{ServerIdentifier}\"]")]
    public class WelcomeMessage : IMessage
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WelcomeMessage"/> class.
        /// </summary>
        /// <remarks>Use this constructor for serialization only.</remarks>
        public WelcomeMessage()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WelcomeMessage"/> class.
        /// </summary>
        /// <param name="sessionId">String randomly generated by the server and unique to the specific WAMP session</param>
        /// <param name="version">Integer that gives the WAMP protocol version the server speaks</param>
        /// <param name="serverId">String the server may use to disclose it's version, software, platform or identity</param>
        public WelcomeMessage(string sessionId, int version, string serverId)
        {
            SessionId = sessionId;
            ProtocolVersion = version;
            ServerIdentifier = serverId;
        }

        /// <summary>
        /// Gets type of this message: <see cref="MessageTypes.Welcome"/>.
        /// </summary>
        public MessageTypes Type { get { return MessageTypes.Welcome; } }

        /// <summary>
        /// Gets or sets string randomly generated by the server and unique to the specific WAMP session.
        /// </summary>
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets integer that gives the WAMP protocol version the server speaks.
        /// </summary>
        public int ProtocolVersion { get; set; }
        
        /// <summary>
        /// Gets or sets string the server may use to disclose it's version, software, platform or identity.
        /// </summary>
        public string ServerIdentifier { get; set; }

        /// <summary>
        /// Parses current message to array of objects, ready to serialize it directly into WAMP message frame.
        /// </summary>
        public object[] ToArray()
        {
            return new object[] { MessageTypes.Welcome, SessionId, ProtocolVersion, ServerIdentifier };
        }
    }
}
